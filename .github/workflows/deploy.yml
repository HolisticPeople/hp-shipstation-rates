name: Deploy HP ShipStation Rates to Kinsta

on:
  push:
    branches:
      - dev   # Auto-deploy to staging on push to dev
      # master branch does NOT auto-deploy to production (manual only)
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Automatic push to dev = staging deployment
            echo "env=staging" >> $GITHUB_OUTPUT
          else
            # Manual workflow_dispatch = user chooses environment
            echo "env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          fi

      - name: Set environment variables
        id: vars
        run: |
          ENV="${{ steps.env.outputs.env }}"
          
          if [ "$ENV" = "production" ]; then
            echo "host=${{ secrets.KINSTAPROD_HOST }}" >> $GITHUB_OUTPUT
            echo "port=${{ secrets.KINSTAPROD_PORT }}" >> $GITHUB_OUTPUT
            echo "user=${{ secrets.KINSTAPROD_USER }}" >> $GITHUB_OUTPUT
            echo "plugins_base=${{ secrets.KINSTAPROD_PLUGINS_BASE }}" >> $GITHUB_OUTPUT
          else
            echo "host=${{ secrets.KINSTA_HOST }}" >> $GITHUB_OUTPUT
            echo "port=${{ secrets.KINSTA_PORT }}" >> $GITHUB_OUTPUT
            echo "user=${{ secrets.KINSTA_USER }}" >> $GITHUB_OUTPUT
            echo "plugins_base=${{ secrets.KINSTA_PLUGINS_BASE }}" >> $GITHUB_OUTPUT
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          if [ "${{ steps.vars.outputs.environment }}" = "production" ]; then
            echo "${{ secrets.KINSTAPROD_SSH_KEY }}" > ~/.ssh/kinsta_key
          else
            echo "${{ secrets.KINSTA_SSH_KEY }}" > ~/.ssh/kinsta_key
          fi
          chmod 600 ~/.ssh/kinsta_key
          
          # Verify key format
          echo "Verifying SSH key format..."
          head -1 ~/.ssh/kinsta_key
          tail -1 ~/.ssh/kinsta_key
          
          # Add host to known_hosts
          ssh-keyscan -p ${{ steps.vars.outputs.port }} ${{ steps.vars.outputs.host }} >> ~/.ssh/known_hosts 2>/dev/null

      - name: Test SSH connection
        run: |
          echo "Testing SSH connection to ${{ steps.vars.outputs.environment }}..."
          ssh -i ~/.ssh/kinsta_key -p ${{ steps.vars.outputs.port }} \
            -o StrictHostKeyChecking=no \
            ${{ steps.vars.outputs.user }}@${{ steps.vars.outputs.host }} \
            "echo 'SSH connection successful!'"

      - name: Backup existing plugin (if exists)
        run: |
          PLUGIN_PATH="${{ steps.vars.outputs.plugins_base }}/hp-shipstation-rates"
          
          echo "Checking for existing plugin at: $PLUGIN_PATH"
          
          ssh -i ~/.ssh/kinsta_key -p ${{ steps.vars.outputs.port }} \
            ${{ steps.vars.outputs.user }}@${{ steps.vars.outputs.host }} \
            "if [ -d '$PLUGIN_PATH' ]; then cp -rn '$PLUGIN_PATH' '$PLUGIN_PATH.bak.$(date +%Y%m%d-%H%M%S)'; echo 'Backup created'; else echo 'No existing plugin to backup'; fi"

      - name: Deploy to ${{ steps.vars.outputs.environment }}
        run: |
          PLUGIN_PATH="${{ steps.vars.outputs.plugins_base }}/hp-shipstation-rates"
          
          echo "Deploying to: ${{ steps.vars.outputs.environment }}"
          echo "Target path: $PLUGIN_PATH"
          
          # Create plugin directory if it doesn't exist
          ssh -i ~/.ssh/kinsta_key -p ${{ steps.vars.outputs.port }} \
            ${{ steps.vars.outputs.user }}@${{ steps.vars.outputs.host }} \
            "mkdir -p $PLUGIN_PATH"
          
          # Deploy files using rsync (NO --delete to prevent accidental deletion)
          rsync -avz \
            -e "ssh -i ~/.ssh/kinsta_key -p ${{ steps.vars.outputs.port }}" \
            --exclude-from='.github/deploy-exclude.txt' \
            ./ ${{ steps.vars.outputs.user }}@${{ steps.vars.outputs.host }}:$PLUGIN_PATH/
          
          echo "✅ Deployment to ${{ steps.vars.outputs.environment }} complete!"

      - name: Flush caches
        run: |
          echo "Flushing WordPress caches..."
          
          ssh -i ~/.ssh/kinsta_key -p ${{ steps.vars.outputs.port }} \
            ${{ steps.vars.outputs.user }}@${{ steps.vars.outputs.host }} \
            "cd ${{ steps.vars.outputs.plugins_base }}/../.. && wp cache flush --allow-root && wp transient delete --all --allow-root || true"
          
          echo "✅ Cache flush complete!"

      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/kinsta_key
